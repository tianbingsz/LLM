# -*- coding: utf-8 -*-
"""Qwen2.5_0.5_B-Alpaca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C1Maa0IjROTb88kb7M37mmuAHOO6MFry

# SFT fine-tuning with QWen2.5 for Alpaca Dataset
(https://github.com/unslothai/notebooks/blob/main/nb/Qwen2.5_(7B)-Alpaca.ipynb)

### Installation
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# 
# # Do this only in Colab notebooks! Otherwise use pip install unsloth
# !pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl==0.15.2 triton cut_cross_entropy
# !pip install sentencepiece protobuf "datasets>=3.4.1" huggingface_hub hf_transfer

import torch
print(torch.__version__)

import bitsandbytes
print(bitsandbytes.__version__)

import transformers
print(transformers.__version__)

"""# Load Model and Tokenizer"""

import transformers
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig

from peft import LoraConfig, get_peft_model

model_id = "Qwen/Qwen2.5-0.5B"

tokenizer = AutoTokenizer.from_pretrained(model_id)

"""### Quantization config (QLoRA)

"""

quant_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

model = AutoModelForCausalLM.from_pretrained(
    model_id,
    quantization_config=quant_config,
    device_map="auto",
    torch_dtype=torch.bfloat16,
    trust_remote_code=True,
)

"""### *LORA* Config"""

peft_config = LoraConfig(
    lora_alpha=16,
    lora_dropout=0.1,
    r=32,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=[
        "q_proj",
        "k_proj",
        "v_proj",
        "o_proj",
        "gate_proj",
        "up_proj",
        "down_proj",
    ]
)

"""## DATA

We now use the Alpaca dataset from yahma, which is a filtered version of 52K of the original Alpaca dataset. You can replace this code section with your own data prep.

[NOTE] To train only on completions (ignoring the user's input) read TRL's docs here.

[NOTE] Remember to add the EOS_TOKEN to the tokenized output!! Otherwise you'll get infinite generations!

If you want to use the llama-3 template for ShareGPT datasets, try our conversational notebook-Alpaca.ipynb)

For text completions like novel writing, try this notebook-Text_Completion.ipynb).
"""

alpaca_prompt = """Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.

### Instruction:
{}

### Input:
{}

### Response:
{}"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN
def formatting_prompts_func(examples):
    instructions = examples["instruction"]
    inputs       = examples["input"]
    outputs      = examples["output"]
    texts = []
    for instruction, input, output in zip(instructions, inputs, outputs):
        # Must add EOS_TOKEN, otherwise your generation will go on forever!
        text = alpaca_prompt.format(instruction, input, output) + EOS_TOKEN
        texts.append(text)
    return { "text" : texts, }
pass

from datasets import load_dataset
dataset = load_dataset("yahma/alpaca-cleaned", split = "train")

len(dataset)

dataset[0]

dataset = dataset.map(formatting_prompts_func, batched = True)

dataset[0]

dataset

"""<a name="Train"></a>
### Train the model
Now let's use Huggingface TRL's `SFTTrainer`! More docs here: [TRL SFT docs](https://huggingface.co/docs/trl/sft_trainer). We do 60 steps to speed things up, but you can set `num_train_epochs=1` for a full run, and turn off `max_steps=None`.
"""

from trl import SFTTrainer, SFTConfig

# Define training config first
training_args = SFTConfig(
    dataset_text_field="text",           # The field in your dataset containing text prompts
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,       # Accumulate gradients to mimic larger batch size
    warmup_steps=5,
    # num_train_epochs = 1, # Set this for 1 full training run.
    max_steps=30,                        # Train for 30 steps (for quick tests)
    learning_rate=2e-4,                  # Learning rate, adjust for longer training
    logging_steps=1,
    optim="adamw_8bit",                  # Optimizer with 8-bit AdamW (efficient on smaller GPUs)
    weight_decay=0.01,
    lr_scheduler_type="linear",
    seed=3407,
    report_to="none"                    # Disable reporting (like WandB)
)

# Instantiate the trainer
trainer = SFTTrainer(
    model=model,
    args=training_args,
    train_dataset=dataset,
    peft_config=peft_config,
    tokenizer=tokenizer,
)

# Optionally print trainable params info
trainer.model.print_trainable_parameters()

# @title Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

"""Let's train the model! To resume a training run, set `trainer.train(resume_from_checkpoint = True)`"""

trainer_stats = trainer.train()

# @title Show final memory and time stats
used_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
used_memory_for_lora = round(used_memory - start_gpu_memory, 3)
used_percentage = round(used_memory / max_memory * 100, 3)
lora_percentage = round(used_memory_for_lora / max_memory * 100, 3)
print(f"{trainer_stats.metrics['train_runtime']} seconds used for training.")
print(
    f"{round(trainer_stats.metrics['train_runtime']/60, 2)} minutes used for training."
)
print(f"Peak reserved memory = {used_memory} GB.")
print(f"Peak reserved memory for training = {used_memory_for_lora} GB.")
print(f"Peak reserved memory % of max memory = {used_percentage} %.")
print(f"Peak reserved memory for training % of max memory = {lora_percentage} %.")

"""<a name="Inference"></a>
### Inference
Let's run the model! You can change the instruction and input - leave the output blank!


"""

input = tokenizer(
    [
        alpaca_prompt.format(
            "Continue the fibonnaci sequence.", # instruction
            "1, 1, 2, 3, 5, 8", # input
            "", # output - leave this blank for generation!
        )
    ],
    return_tensors="pt",
).to("cuda")

input

outputs = model.generate(**input, max_new_tokens = 64, use_cache = True)
tokenizer.batch_decode(outputs)

inputs = tokenizer(
[
    alpaca_prompt.format(
        "Continue the fibonnaci sequence.", # instruction
        "1, 1, 2, 3, 5, 8", # input
        "", # output - leave this blank for generation!
    )
], return_tensors = "pt").to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer)
_ = model.generate(**inputs, streamer = text_streamer, max_new_tokens = 128)

"""<a name="Save"></a>
### Saving, loading finetuned models
To save the final model as LoRA adapters, either use Huggingface's `push_to_hub` for an online save or `save_pretrained` for a local save.

**[NOTE]** This ONLY saves the LoRA adapters, and not the full model. To save to 16bit or GGUF, scroll down!
"""

model.save_pretrained("lora_model")  # Local saving
tokenizer.save_pretrained("lora_model")
# model.push_to_hub("your_name/lora_model", token = "...") # Online saving
# tokenizer.push_to_hub("your_name/lora_model", token = "...") # Online saving

"""Now if you want to load the LoRA adapters we just saved for inference, set

---

`False` to `True`:
"""

if False:
    from peft import AutoPeftModelForCausalLM
    from transformers import AutoTokenizer
    model = AutoPeftModelForCausalLM.from_pretrained(
        "trainer_output/checkpoint-30/", # YOUR MODEL YOU USED FOR TRAINING
        load_in_4bit = True,
    )
    tokenizer = AutoTokenizer.from_pretrained("lora_model")

inputs = tokenizer(
[
    alpaca_prompt.format(
        "Continue the fibonnaci sequence.", # instruction
        "1, 1, 2, 3, 5, 8", # input
        "", # output - leave this blank for generation!
    )
], return_tensors = "pt").to("cuda")

from transformers import TextStreamer
text_streamer = TextStreamer(tokenizer)
_ = model.generate(**inputs, streamer = text_streamer, max_new_tokens = 128)

"""### Saving to float16 for VLLM

We also support saving to `float16` directly. Select `merged_16bit` for float16 or `merged_4bit` for int4. We also allow `lora` adapters as a fallback. Use `push_to_hub_merged` to upload to your Hugging Face account! You can go to https://huggingface.co/settings/tokens for your personal tokens.
"""

# Merge to 16bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_16bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_16bit", token = "")

# Merge to 4bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_4bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_4bit", token = "")

# Just LoRA adapters
if False: model.save_pretrained_merged("model", tokenizer, save_method = "lora",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "lora", token = "")

"""## merge with lora and support vllm"""

from peft import AutoPeftModelForCausalLM

base_model_id = "Qwen/Qwen2.5-0.5B"     # Base HF model
adapter_path = "trainer_output/checkpoint-30/"   # Your fine-tuned LoRA folder
output_path = "merged_model"            # Where to save merged model

# Load PEFT model with LoRA adapter
model = AutoPeftModelForCausalLM.from_pretrained(adapter_path, device_map="auto", torch_dtype="auto")

# Merge LoRA weights into base model weights
model = model.merge_and_unload()

# Save merged model for vLLM usage
model.save_pretrained(output_path)
tokenizer = AutoTokenizer.from_pretrained(base_model_id, trust_remote_code=True)
tokenizer.save_pretrained(output_path)

"""## Generate Text via vLLM"""

!pip install vllm

from vllm import LLM, SamplingParams

max_model_len = 2048
merged_model_path = "merged_model"            # Where to save merged model

# Load vLLM model
v_model = LLM(
    model=merged_model_path,
    enforce_eager=True,            # Optional, for debugging/tracing
    dtype="half",
    max_model_len=max_model_len,
    trust_remote_code=True,
)

prompt_text = alpaca_prompt.format(
    "Continue the fibonnaci sequence.",  # instruction
    "1, 1, 2, 3, 5, 8",                 # input
    "",                                 # output (empty for generation)
)

SAMPLING_PARAMS = {
    "temperature": 0.0,
    "top_p": 0.98,
    "max_tokens": 256,
}

# Instead of tokenized input, just pass prompt_text as a string:
outputs = v_model.generate(prompt_text, SamplingParams(**SAMPLING_PARAMS))

print(outputs[0].outputs[0].text)